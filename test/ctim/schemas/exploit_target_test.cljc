(ns ctim.schemas.exploit-target-test
  (:require #?(:clj  [clojure.test :refer [deftest is testing use-fixtures]]
               :cljs [cljs.test :refer-macros [deftest is testing use-fixtures]])
            [ctim.schemas.exploit-target :as et]
            [ctim.examples.exploit-targets :as e]
            [flanders.schema :as fs]
            [schema.core :as s]))

(use-fixtures :once (fn [t]
                      (s/with-fn-validation (t))))

(deftest test-exploit-target-schema
  (testing "example with all possible fields"
    (is (s/validate
         (fs/->schema et/ExploitTarget)
         e/exploit-target-maximal)))

  (testing "example with only required fields"
    (is (s/validate
         (fs/->schema et/ExploitTarget)
         e/exploit-target-minimal))))

(deftest test-new-exploit-target-schema
  (testing "example with all possible fields"
    (is (s/validate
         (fs/->schema et/NewExploitTarget)
         e/new-exploit-target-maximal)))

  (testing "example with only required fields"
    (is (s/validate
         (fs/->schema et/NewExploitTarget)
         e/new-exploit-target-minimal))))

(deftest test-stored-exploit-target-schema
  (testing "example with all possible fields"
    (is (s/validate
         (fs/->schema et/StoredExploitTarget)
         e/stored-exploit-target-maximal)))

  (testing "example with only required fields"
    (is (s/validate
         (fs/->schema et/StoredExploitTarget)
         e/stored-exploit-target-minimal))))
