(ns ctim.generators.exploit-target-test
  (:require [clj-momo.test-helpers.core :as mth]
            [clojure.test :refer [use-fixtures]]
            [clojure.test.check.clojure-test :refer [defspec]]
            [ctim.schemas.exploit-target :as exploit-target]
            [ctim.test-helpers
             [core :as th]
             [properties :as property]]
            [flanders.utils :as fu]))

(use-fixtures :once
  th/fixture-spec-validation
  th/fixture-fast-gen
  mth/fixture-schema-validation
  (th/fixture-spec exploit-target/ExploitTarget
                   "test.exploit-target")
  (th/fixture-spec exploit-target/NewExploitTarget
                   "test.new-exploit-target")
  (th/fixture-spec exploit-target/StoredExploitTarget
                   "test.stored-exploit-target")
  (th/fixture-spec (fu/require-all exploit-target/ExploitTarget)
                   "test.max.exploit-target")
  (th/fixture-spec (fu/require-all exploit-target/NewExploitTarget)
                   "test.max.new-exploit-target")
  (th/fixture-spec (fu/require-all exploit-target/StoredExploitTarget)
                   "test.max.stored-exploit-target"))

;; exploit-target

(defspec ^:gen spec-generated-exploit-target-is-valid
  (property/generated-entity-is-valid :test.exploit-target/map))

(defspec ^:gen spec-generated-max-exploit-target-is-valid
  (property/generated-entity-is-valid :test.max.exploit-target/map))

(defspec ^:gen spec-generated-exploit-target-id-is-valid
  (property/generated-entity-id-is-valid :test.exploit-target/map
                                         "exploit-target"))

;; New exploit-target

(defspec ^:gen spec-generated-new-exploit-target-is-valid
  (property/generated-entity-is-valid :test.new-exploit-target/map))

(defspec ^:gen spec-generated-max-new-exploit-target-is-valid
  (property/generated-entity-is-valid :test.max.exploit-target/map))

(defspec ^:gen spec-generated-new-exploit-target-id-is-valid
  (property/generated-entity-id-is-valid :test.new-exploit-target/map
                                         "exploit-target"
                                         :optional))

;; Stored exploit-target

(defspec ^:gen spec-generated-stored-exploit-target-is-valid
  (property/generated-entity-is-valid :test.stored-exploit-target/map))

(defspec ^:gen spec-generated-max-stored-exploit-target-is-valid
  (property/generated-entity-is-valid :test.max.stored-exploit-target/map))

(defspec ^:gen spec-generated-stored-exploit-target-id-is-valid
  (property/generated-entity-id-is-valid :test.stored-exploit-target/map
                                         "exploit-target"))
